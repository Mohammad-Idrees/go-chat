// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: sessions.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    id,
    email,
    user_agent,
    client_ip,
    refresh_token,
    expires_at
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, email, user_agent, client_ip, refresh_token, expires_at, is_blocked, is_logged_out, created_at
`

type CreateSessionParams struct {
	ID           uuid.UUID
	Email        string
	UserAgent    string
	ClientIp     string
	RefreshToken string
	ExpiresAt    time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg *CreateSessionParams) (*Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.ID,
		arg.Email,
		arg.UserAgent,
		arg.ClientIp,
		arg.RefreshToken,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.UserAgent,
		&i.ClientIp,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.IsBlocked,
		&i.IsLoggedOut,
		&i.CreatedAt,
	)
	return &i, err
}

const getSession = `-- name: GetSession :one
SELECT id, email, user_agent, client_ip, refresh_token, expires_at, is_blocked, is_logged_out, created_at FROM sessions 
WHERE id = $1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (*Session, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.UserAgent,
		&i.ClientIp,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.IsBlocked,
		&i.IsLoggedOut,
		&i.CreatedAt,
	)
	return &i, err
}

const updateSession = `-- name: UpdateSession :one
UPDATE sessions
SET
    is_blocked = COALESCE($1, is_blocked),
    is_logged_out = COALESCE($2,is_logged_out)
WHERE
    id = $3
RETURNING id, email, user_agent, client_ip, refresh_token, expires_at, is_blocked, is_logged_out, created_at
`

type UpdateSessionParams struct {
	IsBlocked   *bool
	IsLoggedOut *bool
	ID          uuid.UUID
}

func (q *Queries) UpdateSession(ctx context.Context, arg *UpdateSessionParams) (*Session, error) {
	row := q.db.QueryRow(ctx, updateSession, arg.IsBlocked, arg.IsLoggedOut, arg.ID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.UserAgent,
		&i.ClientIp,
		&i.RefreshToken,
		&i.ExpiresAt,
		&i.IsBlocked,
		&i.IsLoggedOut,
		&i.CreatedAt,
	)
	return &i, err
}
