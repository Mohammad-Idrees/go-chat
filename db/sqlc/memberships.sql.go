// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: memberships.sql

package db

import (
	"context"
)

const createMembership = `-- name: CreateMembership :one
INSERT INTO memberships (
  user_id, channel_id
) VALUES (
  $1, $2 
)
RETURNING id, user_id, channel_id, created_at
`

type CreateMembershipParams struct {
	UserID    int64
	ChannelID int64
}

func (q *Queries) CreateMembership(ctx context.Context, arg *CreateMembershipParams) (*Membership, error) {
	row := q.db.QueryRow(ctx, createMembership, arg.UserID, arg.ChannelID)
	var i Membership
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ChannelID,
		&i.CreatedAt,
	)
	return &i, err
}

const getMemberships = `-- name: GetMemberships :many
SELECT id, user_id, channel_id, created_at
FROM memberships
`

func (q *Queries) GetMemberships(ctx context.Context) ([]*Membership, error) {
	rows, err := q.db.Query(ctx, getMemberships)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Membership{}
	for rows.Next() {
		var i Membership
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ChannelID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMembershipsByChannelId = `-- name: GetMembershipsByChannelId :many
SELECT id, user_id, channel_id, created_at
FROM memberships
where channel_id = $1
`

func (q *Queries) GetMembershipsByChannelId(ctx context.Context, channelID int64) ([]*Membership, error) {
	rows, err := q.db.Query(ctx, getMembershipsByChannelId, channelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Membership{}
	for rows.Next() {
		var i Membership
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ChannelID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMembershipsByUserId = `-- name: GetMembershipsByUserId :many
SELECT id, user_id, channel_id, created_at
FROM memberships
where user_id = $1
`

func (q *Queries) GetMembershipsByUserId(ctx context.Context, userID int64) ([]*Membership, error) {
	rows, err := q.db.Query(ctx, getMembershipsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Membership{}
	for rows.Next() {
		var i Membership
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ChannelID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
