version: '3.1'
services:
  postgres:
    container_name: postgres
    image: postgres:15-alpine
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    # command: ["executable", "arg"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - go-network
  
  redis:
    container_name: redis
    image: redis:latest
    env_file:
      - .env
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - go-network

  app1:
    container_name: app1
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - SERVER_NAME=APP1
    networks:
      - go-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    # entrypoint:
    #   [
    #     "/app/wait-for.sh",
    #     "postgres:5432",
    #     "--",
    #     "/app/start.sh"
    #   ]
    # command: [ "/app/main" ]
    

  app2:
    container_name: app2
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - SERVER_NAME=APP2
    networks:
      - go-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    

  app3:
    container_name: app3
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - SERVER_NAME=APP3
    networks:
      - go-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    
  nginx:
    container_name: nginx-reverse-proxy
    image: nginx:latest
    env_file:
      - .env
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - go-network
    depends_on:
      - app1
      - app2
      - app3
    
volumes:
  postgres_data:

networks:
  go-network:
    driver: bridge